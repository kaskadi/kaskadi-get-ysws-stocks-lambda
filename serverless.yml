service:
  name: kaskadi-stock-update-lambda

package:
  individually: true
  exclude:
    - "**/**"

provider:
  name: aws
  runtime: nodejs10.x
  stackName: ${self:service.name}-stack
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'eu-central-1'}
  deploymentBucket:
    name: ${env:SLS_DEPLOY_BUCKET}
  deploymentPrefix: '@kaskadi/${self:service.name}'
  apiGateway:
    restApiId: !ImportValue KaskadiStocksRestAPIGatewayId
    restApiRootResourceId: !ImportValue KaskadiStocksRestAPIGatewayRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: !Ref KaskadiStockUpdateTopic

functions:
  KaskadiStockUpdate:
    handler: kaskadi-stock-update-lambda.handler
    name: ${self:service.name}
    layers:
      - !ImportValue KaskadiEsLayerArn
      - !ImportValue KaskadiWemaloLayerArn
    package:
      include:
        - 'kaskadi-stock-update-lambda.js'
        - 'helpers/**'
        - 'node_modules/**'
    environment:
      WEMALO_TOKEN: ${env:WEMALO_TOKEN}
      ES_ID: ${env:ES_ID}
      ES_SECRET: ${env:ES_SECRET}
      ES_ENDPOINT: ${env:ES_ENDPOINT}
    events:
      - http:
          method: post
          path: update
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue KaskadiStocksCognitoAuthorizerId
      - schedule:
          rate: cron(0 7 * * ? 1) # runs every monday at 7AM
          enabled: true

resources:
  Resources:
    KaskadiStockUpdateTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: KaskadiStockUpdate
        DisplayName: Klimapartner's stock update
  Outputs:
    KaskadiStockUpdateTopicArn:
      Value:
        Ref: KaskadiStockUpdateTopic
      Export:
        Name: KaskadiStockUpdateTopicArn
